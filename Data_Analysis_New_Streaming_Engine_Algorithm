---
title: "Data Analysis - WNW New Engine Algorithm"
subtitle: 'Assignment 3'
author: "Jana Omaiche"
output:
  pdf_document: default
  html_document:
    df_print: paged
  word_document: default
  html_notebook: default
---

#### **Setup**

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

The following packages will be loaded to help produce the analysis:

```{r, echo = TRUE, warnings = FALSE}
suppressPackageStartupMessages({
library(readr, quietly = TRUE) # importing data
library(dplyr, quietly = TRUE) # manipulating data
library(lubridate, quietly = TRUE) # manipulating dates/times
library(outliers, quietly = TRUE) # scanning for outliers
library(ggplot2, quietly = TRUE) # building visualisations
library(knitr, quietly = TRUE) # generating reports in different formats
library(MASS, quietly = TRUE) # generating bivariate normal distribution
library(stats, quietly = TRUE) # ANOVA
library(tidyr, quietly = TRUE) # pivoting
library(pwr, quietly = TRUE) # A/B testing
})
```


#### **Reading/importing the data:**

```{r}
# reading/importing dataset
streaming_df <- read.csv("D:/streaming_data.csv")

# dimensions of df
dim(streaming_df)

# variable data structure types
str(streaming_df)

# changing social metric variable type to ordinal factor (0-10)
streaming_df$social_metric <- as.factor(streaming_df$social_metric)

# summary of variables
summary(streaming_df)
```

<br>

#### **Cleaning the dataset:**

```{r}
#Scanning dataset for amount of missing values in each variable
colSums(is.na(streaming_df))
```

<br>

#### **Normal distribution statistical analysis:**


```{r}
numeric_vars <- streaming_df %>%
  select_if(is.numeric)

num_bins <- 30

hist_plots <- numeric_vars %>%
  pivot_longer(everything()) %>%
  ggplot(aes(value)) +
  geom_histogram(bins = num_bins, fill = "cadetblue1", color = "black", alpha = 0.7) +
  facet_wrap(~name, scales = "free") +
  labs(title = "Histograms of numeric variables", x = "Value", y = "Frequency")

print(hist_plots)

# Check for normality using the Shapiro-Wilk test
shapiro_test_results <- numeric_vars %>%
  summarise_all(~shapiro.test(.)$p.value)

print(shapiro_test_results)
```

<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>

#### **Biasness:**

```{r}
# calculating how many people are in both groups
group_counts <- table(streaming_df$group)

print(group_counts)
```


```{r}
# calculating the proportion of genders in Group A and B
proportion_gender_A <- table(streaming_df[streaming_df$group == "A", "gender"]) / sum(streaming_df$group == "A")
proportion_gender_B <- table(streaming_df[streaming_df$group == "B", "gender"]) / sum(streaming_df$group == "B")

print(proportion_gender_A)
print(proportion_gender_B)
```

```{r, fig.width = 6, fig.height = 4}
# barplot to compare the distributions in genders from group a and group b 
barplot(rbind(proportion_gender_A, proportion_gender_B), beside = TRUE, 
        col = c("maroon1", "purple"), names.arg = unique(streaming_df$gender),
        legend.text = c("Group A", "Group B"), main = "Gender distribution of groups A & B")
```
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>

#### **Statistical visualisations of variables:**


```{r, fig.width = 6, fig.height = 4}
group_a_data <- streaming_df[streaming_df$group == "A", ]
group_b_data <- streaming_df[streaming_df$group == "B", ]

# Scatter plot for Group A
plot_group_a <- ggplot(data = group_a_data, aes(x = age, y = hours_watched)) +
  geom_point(position = position_jitter(width = 0.45, height = 0.45)) +
  geom_smooth(method = "lm", se = FALSE, color = "hotpink") +
  ggtitle("Scatter plot of hours watched vs. age (Group A)") +
  labs(x = 'Age (years)', y = 'Hours watched')

# Scatter plot for Group B
plot_group_b <- ggplot(data = group_b_data, aes(x = age, y = hours_watched)) +
  geom_point(position = position_jitter(width = 0.45, height = 0.45)) +
  geom_smooth(method = "lm", se = FALSE, color = "purple") +
  ggtitle("Scatter plot of hours watched vs. age (Group B)") +
  labs(x = 'Age (years)', y = 'Hours watched')

print(plot_group_a)
print(plot_group_b)
```



```{r, fig.width = 6, fig.height = 4}
# Create separate scatter plots for Group A and Group B
plot_group_a <- ggplot(data = group_a_data, aes(x = social_metric, y = hours_watched)) +
  geom_point() +
  labs(x = "Social metric", y = "Hours watched") +
  ggtitle("Scatter plot of social metric vs. hours watched (Group A)")

plot_group_b <- ggplot(data = group_b_data, aes(x = social_metric, y = hours_watched)) +
  geom_point() +
  labs(x = "Social metric", y = "Hours watched") +
  ggtitle("Scatter plot of social metric vs. hours watched (Group B)")

print(plot_group_a)
print(plot_group_b)
```



```{r, fig.width = 6, fig.height = 4}
# boxplot of the dependent variable against group a vs group b
custom_colors <- c("Group A" = "maroon1", "Group B" = "purple")

gg <- ggplot(data = streaming_df, aes(x = group, y = hours_watched, fill = group)) +
  geom_boxplot(color = "black", fill = custom_colors) +
  labs(x = "Groups", y = "Hours watched") +
  ggtitle("Boxplots of hours watched for Group A vs. Group B")

print(gg)
```



```{r}
# summary statistics of dependent variable for both groups
# Group A
summary_A <- summary(streaming_df$hours_watched[streaming_df$group == "A"])

# Group B
summary_B <- summary(streaming_df$hours_watched[streaming_df$group == "B"])

print(summary_A)
print(summary_B)
```


<br>

#### **Simple regression analysis:**

Simple linear regression:

```{r}
# separating Group A and Group B data
group_a_data <- streaming_df[streaming_df$group == "A", ]
group_b_data <- streaming_df[streaming_df$group == "B", ]

# linear regression models for each group
linear_model_a <- lm(hours_watched ~ 1, data = group_a_data)
linear_model_b <- lm(hours_watched ~ 1, data = group_b_data)

# printing lm summaries
summary_A <- summary(linear_model_a)
summary_B <- summary(linear_model_b)

print(summary_A)
print(summary_B)
```



```{r}
residuals_a <- residuals(linear_model_a)
residuals_b <- residuals(linear_model_b)

# QQ plot for Group A
qqnorm(residuals_a, main = "QQ Plot for Group A Residuals")
qqline(residuals_a, col = "maroon1")

a0_a <- coef(linear_model_a)
text(0.5, -1, paste("Line of best fit (Group A): y =", round(a0_a, 2)), adj = c(0, 0))

# QQ plot for Group B
qqnorm(residuals_b, main = "QQ Plot for Group B Residuals")
qqline(residuals_b, col = "purple")

a0_b <- coef(linear_model_b)
text(0.2, -1.0, paste("Line of best fit (Group B): y =", round(a0_b, 2)), adj = c(0, 0))
```




```{r}
# SST for Group A and Group B 
SST_a <- sum((group_a_data$hours_watched - mean(group_a_data$hours_watched))^2)
SST_b <- sum((group_b_data$hours_watched - mean(group_b_data$hours_watched))^2)

# SSR for Group A and Group B  
SSR_a <- sum(residuals(linear_model_a)^2)
SSR_b <- sum(residuals(linear_model_b)^2)

# R-squared for Group A and Group B
R_squared_a <- 1 - (SSR_a / SST_a)
R_squared_b <- 1 - (SSR_b / SST_b)

print(round(R_squared_a))
print(R_squared_b)
```

<br>

#### **Multiple linear regression analysis:**

```{r}
multiple_linear <- lm(hours_watched ~ age + social_metric + group, data = streaming_df)

summary(multiple_linear)
```



```{r, fig.width = 6, fig.height = 4}
# multiple linear regression models for each group
multiple_linear_a <- lm(hours_watched ~ age + social_metric, data = group_a_data)
multiple_linear_b <- lm(hours_watched ~ age + social_metric, data = group_b_data)

# QQ plot for Group A
residuals_multilinear_a <- residuals(multiple_linear_a)
qqnorm(residuals_multilinear_a, main = "QQ plot for Group A")
qqline(residuals_multilinear_a, col = "red")
abline(0, 1, col = "blue")

# R-squared for Group A
r_squared_multilinear_a <- summary(multiple_linear_a)$r.squared
text(-1, 2, paste("R-squared (Group A) =", round(r_squared_multilinear_a, 4)))

# Line of best fit equation for Group A
coefficients_multilinear_a <- coefficients(multiple_linear_a)
equation_a <- paste("y =", round(coefficients_multilinear_a[1], 4))
text(-2, 1.5, labels = equation_a, cex = 1)

# QQ plot for Group B
residuals_multilinear_b <- residuals(multiple_linear_b)
qqnorm(residuals_multilinear_b, main = "QQ plot for Group B")
qqline(residuals_multilinear_b, col = "red")
abline(0, 1, col = "blue")

# R-squared for Group B
r_squared_multilinear_b <- summary(multiple_linear_b)$r.squared
text(-1, 2, paste("R-squared (Group B) =", round(r_squared_multilinear_b, 4)))

# Line of best fit equation for Group B
coefficients_multilinear_b <- coefficients(multiple_linear_b)
equation_b <- paste("y =", round(coefficients_multilinear_b[1], 4))
text(-1.5, 1.5, labels = equation_b, cex = 1)
```
<br>
<br>
<br>
<br>

#### **3D multidimensional visualisation of age, social metric, and hours watched:**


```{r}
library(plotly)

# 3D multidimensional scatter plot
scatter_3d <- plot_ly(data = streaming_df, x = ~age, y = ~social_metric, z = ~hours_watched, 
                      type = "scatter3d", mode = "markers", marker = list(size = 4, color = ~hours_watched))

scatter_3d <- scatter_3d %>% layout(
  scene = list(xaxis = list(title = "Age"),
               yaxis = list(title = "Social Metric"),
               zaxis = list(title = "Hours Watched")),
  title = "3D multidimensional scatter plot for the multiple linear regression analysis")

scatter_3d
```


#### **A/B testing**

```{r}
# t-test for a/b testing
t_test <- t.test(group_a_data$hours_watched, group_b_data$hours_watched, var.equal = TRUE)

print(t_test)

alpha <- 0.05

if (t_test$p.value < alpha) {
  cat("Reject the null hypothesis: There is a statistically significant difference in user engagement between Group A and Group B.\n")
} else {
  cat("Fail to reject the null hypothesis: There is no statistically significant difference in user engagement between Group A and Group B.\n")
}
```
