title: "Pre-processing Data Project: Video Games Sales"
author: "Jana Omaiche"
subtitle: 'Assignment 1'
output:
  html_document:
    df_print: paged
  pdf_document: default
  pdf: default
  word_document: default
---

### **Introduction:** 

This project will be analysing a video games sales dataset. One of the reasons why this dataset was chosen is due to the variety and amount of variables included. There are both qualitative and quantitative variables. The variety of data types included are numeric, character, and factors. As one of my hobbies are playing video games and have been exposed to a range of different gaming consoles/platforms from childhood until now, I am interested to see what video games have produced the greatest sales. I am also curious to identify which platform it was produced for, what year the game was released, and what genre it belonged to. The analysis of this dataset is not only interesting from a video gamer perspective, but also from a company's perspective who sells video games and is determined to achieve high sales for new and improved games. For example, finding out what the most popular selling genre or platform type can determine whether a game will attract majority of the population, therefore improving the amount of sales the video game achieves (Babb et al. 2013). 


### **Setup:**

The following packages will be loaded to help produce the analysis: 

```{r, echo = TRUE, warning = FALSE, suppressPackageStartupMessages(suppressMessages(library(dplyr)))}

library(readr) # useful for importing data
library(knitr) # useful for generating reports in different formats (HTML, PDF, Word)
library(dplyr) # useful for data manipulation and summary statistics
library(magrittr) # useful for being able to use the forward pipe operator function
library(conflicted) # useful for avoiding conflict when using dplyr as functions may have the same names

```

The dplyr package is informing that there are objects such as filter and lag that are masked from the 'package:stats' package. This is stated as there are other packages which may share the same worded functions, therefore they are masked from the package to avoid any confusion and wrong analysis occurring.


### **Locating the open sourced dataset:** 

The video games dataset was sourced an opened web dataset website called Kaggle. It was first downloaded as a zip file and then extracted to be saved as a csv file in Microsoft Excel. It will then be saved as an xlsx file for better efficiency in data analysis (Dolgun et al. 2023).


### **Data Description:**

The website URL of the video game sales dataset was sourced from https://www.kaggle.com/datasets/gregorut/videogamesales. The rankings include 16,598 video games with produced sales of over 100,000 copies (Smith 2016).

* **Variable descriptions:**
  + Rank: Overall ranking sales (1 to 16,598)
  + Name: Name of the video game
  + Platform: Gaming platform which the game was released on
  + Year: Year that the game was released (between 1980 to 2020)
  + Genre: Genre of the game
  + Publisher: Publisher of the game
  + NA_Sales: Sales in North America (recorded in millions)
  + EU_Sales: Sales in Europe (recorded in millions)
  + JP_Sales: Sales in Japan (recorded in millions)
  + Other_Sales: Sales in other countries (recorded in millions)
  + Global_Sales: Sales worldwide (recorded in millions)


* **Variable data types and their classifications:**
  + Rank is a qualitative, ordinal variable (integer)
  + Name is a qualitative variable (string)
  + Year is a quantitative, continuous variable (integer) 
  + Platform, , Genre, and Publisher are qualitative variables (strings)
  + NA_Sales, EU_Sales, JP_Sales, Other_Sales, and Global_Sales are quantitative, continuous variables (floats)
  

### **Importing the dataset:**

**Step 1:** After saving the dataset as a csv file, it will be exported and saved as an xlsx file for better analysis as mentioned before. The xlsx files are preferred for larger and complex data sets as they include information the format and content of the worksheets, whereas csv files are in plain text format, using commas to separate the values (Toggle 2023).

**Step 2:** Using the readr and openxlsx packages, the data will be imported with the read.xlsx() function and saved to a data frame named video_games_df.


```{r}

library(readr)
library(openxlsx)

videogames_df <- read.xlsx("D:/video_games.xlsx")

```


### **Inspecting the dataset and variables:**

**Step 1:** The dimensions of video_games will be checked using the dim() function.

```{r}

dim(videogames_df)

```
The dimensions of video_games data frame shows that there are 16,598 rows and 11 columns in the data set.


**Step 2:** The data types will be checked by summarising the variable types using str().

```{r}

str(videogames_df)

```
This shows that there are both numeric and character data types in video games sales dataset, which are listed next to each of the 11 variables. The Year variable will be converted to a numeric data type in the next step as the values are being represented as strings rather than integers. The Platform and Genre variables will also be changed into factors as they contain qualitative unordered data objects which can be stored as a number fixed possible values (Dolgun et al. 2023).


**Step 3:** The factor levels of the categorical variables will be checked and re-arranged/re-named using the as.factor() and as.integer() function. Afterwards, str() will be used again to check the updated data types.

```{r}

videogames_df$Platform <- as.factor(videogames_df$Platform)
videogames_df$Genre <- as.factor(videogames_df$Genre)
videogames_df$Year <- as.integer(videogames_df$Year)

str(videogames_df$Platform)
str(videogames_df$Genre)
str(videogames_df$Year)

str(videogames_df)


```
* This shows that there are 31 levels for Platform variable and 12 levels for Genre variable.

* The Year variable has been changed from character to numeric. This has been converted to remove the strings for the Year variable and store the values as integers instead. The result of the conversion will help any future data analysis involving 'Year' to perform correctly without misinterpretations.

* The Name and Publisher variable is kept as a character type because it is displaying the video game name and publisher name for each game.


**Step 4:** The column names in the video games data frame will be checked using the colnames() function. 

```{r}

colnames(videogames_df)

```

**Step 5:** The column names for the sales variables will be re-named to become more descriptive and user-friendly, then checked again to see the updated version (Dolgun et al. 2023).

```{r}

colnames(videogames_df)[7] <- "North_America_Sales"
colnames(videogames_df)[8] <- "Europe_Sales"
colnames(videogames_df)[9] <- "Japan_Sales"
colnames(videogames_df)[10] <- "Other_Countries_Sales"
colnames(videogames_df)[11] <- "Total_Worldwide_Sales"

colnames(videogames_df)

```


**Step 6:** The head() function will be used to view the dataset with the updated variable names and data types of the first 6 rows.

```{r}

head(videogames_df)

```


**Step 7:** To filter and view the factor levels for Platform and Genre variables, the filter() function is used. The sapply() function will be used afterwards to display the factor levels.

```{r}

videogames_factors <- Filter(is.factor, videogames_df)
sapply(videogames_factors, levels)

```
The 31 levels are listed for the Platform variable and the 12 levels are listed for the Genre variable.


### **Tidying the data set** 

To tidy up the data set, all data values must be presented the same and not include any missing values (Dolgun et al. 2023). As there N/A values in the dataset, they will need to be cleaned by removing them. All N/A data will be removed using the na.omit() function and assigned to videogames_tidy (Kabacoff 2017). To check that all N/A data is removed, any() and is.na() will be used. If the output is true, then it means there is N/A still present in the data. If it is false, then it indicates that all the N/A data has been removed successfully (Kabacoff 2017). 


```{r}

videogames_tidy <- na.omit(videogames_df)

any(is.na(videogames_tidy))


```

##### Confirmation of the dataset becoming tidy:

* The output is false, therefore all N/A values have been omitted from the data set successfully

* There are now 16,327 observations instead as all N/A values were removed from the dataset

* There is no missing data

* All N/A data have been removed to avoid bias and incorrect analysis when analysing the dataset

* The tidy data principle is applied where each observation forms a row and each variable forms a column, therefore each unit of observation forms a table (Wickham, 2014)

* Every value is in it's own cell (Dolgun et al. 2023)

* All variables are correctly titled and do not contain spaces

* The data is in a long format which is more preferable when it comes to data analysis (Kwonhyun, 2023)


### **Summary statistics**

To produce a statistical summary, the function summary() is used on the cleaned data set.

```{r}

summary(videogames_tidy)

```
The minimum, 1st quartile, median, mean, 3rd quartile and maximum values are observed for every numeric variable (which are North America sales, Europe sales, Japan sales, other countries sales, total worldwide sales, and year). 



##### **Total worldwide sales vs. video game genre:**

An interesting and insightful statistical analysis would be to view which genre of video games had the highest worldwide sales. This is relevant to video game developers as genre plays an important part in what achieves the greatest sales and targeted audience in countries all over the world (Apperley 2006). To view the summary statistics for one of the categorical variables (Genre) against the numeric variable (Total Worldwide Sales), the group by() and summarise_at() functions are used. The column names are then changed to represent the minimum, mean, median, standard deviation, and maximum values.

```{r}

summary_stats <- videogames_tidy %>%
  group_by(Genre) %>%
  summarise_at(vars('Total_Worldwide_Sales'),
list(min, mean, median, sd, max))

colnames(summary_stats)[2] <- "Minimum"
colnames(summary_stats)[3] <- "Mean"
colnames(summary_stats)[4] <- "Median"
colnames(summary_stats)[5] <- "Standard Deviation"
colnames(summary_stats)[6] <- "Maximum"

print(summary_stats)

```
This summary statistics table shows which genre of video games had the greatest worldwide sales. The data types are classified as factor for Genre, and numeric (double) for the sales values. It is shown that the sports genre had the greatest maximum number in the dataset of 82.74 million, which determines the highest worldwide sales. The lowest selling video game genre was strategy, as it had the lowest maximum worldwide sales number of 5.45 million. The mean is seen as the highest in the platform genre. Since the platform genre has the largest average of worldwide sales, this determines it is quite consistent in video game sales across the world. The minimum worldwide sales values are the same across all video gaming genres. 


### **Creating a list**

To create a list that contains a numerical value for each of the Platform categorical variable responses, the list() and levels() functions will be used. It will be allocated to platform_list and printed at the end. Since there are 31 levels in the Platform variable as identified previously, the platform_id will range from 1 to 31.


```{r}

platform_list <- list(
  Platform = levels(videogames_tidy$Platform),
  Platform_id = 1:31)

print(platform_list)

```
This list has now allocated a platform id from 1 to 31 for each level in the platform variable. For example, platform_id 14 now represents the PC platform level.


### **Joining the list**

Firstly, the platform_list created needs to be made into a data frame so that they can be joined by dplyr. Afterwards, the full_join() function will be used to join the two data frames. It will be printed with the head() function included so that only the first 6 rows are shown to check it has worked successfully.


```{r}

platform_list_df <- data.frame(platform_list)

joined_platform_list <- platform_list_df %>%
  full_join(videogames_tidy, by = 'Platform')

print(head(joined_platform_list))

```

The full join function was used to include all values from the left and right tables. As shown above, platform_id 1 represents the 2600 platform type. Therefore, all video games released on the 2600 platform can also be viewed by their id number that has been created from the list before.


### **Subsetting the first 10 observations of the data set**

When subsetting the data frame to the first 10 observations and including all variables, the head() function will be used to focus on the top section of the dataset, followed by (n = 10) to specifically look at the first 10 rows. This will be assigned to first_ten. If head() is used by itself, it will only look at the first 6 observations in the dataset. The data structure will then be converted to a matrix using the as.matrix() function and assigned to first_ten_matrix.

```{r}

first_ten <- head(videogames_tidy, n = 10)

first_ten_matrix <- as.matrix(first_ten)

print(first_ten_matrix)

```

To check the structure of the matrix, the str() function can be used on the matrix that has been created above:

```{r}

str(first_ten_matrix)

```
* This is a character matrix as chr is shown at the beginning of the output, and the values inside the matrix are shown as strings (regardless of their original data type)

* The structure of first_ten_matrix shows that there are 10 rows in the matrix (1:10), and 11 columns (1:11)

* There are 2 dimensions (list of 2)

* Each row is numbered from 1 to 10 (dimension 1)

* Each column has a variable name from columns 1 to 11, for example, "Rank", "Name", "Platform", "Year" (dimension 2) 


### **Subsetting the first and last variables of the data set**

Only the first and last variable will be subset as a data frame named first_last_variables using c(1, ncol()) to choose the first column (Rank) and the last column (Total worldwide sales) in the dataset. This will then be converted as an R object file using the saveRDS() function, and saved as a .RData file named first_last_variables. To check this was converted and saved successfully, the output of the .RData file is typed in the coding chunk.

```{r}

first_last_variables <- videogames_tidy[, c(1, ncol(videogames_tidy))]

saveRDS(first_last_variables, file = "first_last_variables.RData")

first_last_variables

```
The ranking of each video game shows how many total worldwide sales was produced.



### **References**

Apperley T (2006) ‘Genre and game studies: Toward a critical approach to video game genres’, *SageJournals*, 37(1):6-23, doi:10.1177/1046878105282278

Babb J, Terry N and Dana K (2013) ‘The Impact of Platform On Global Video Games Sales’, *International Business & Economics Research Journal*, 12(10):1273-1286, doi:10.19030/iber.v12i10.8136

Bache S, Wickham H (2022) *magrittr: A Forward-Pipe Operator for R*, R package version 2.0.3, accessed 8 July 2023. https://CRAN.R-project.org/package=magrittr

Dolgun A, Smith S and Stewart D (2023) ‘Data Wrangling’ [modules, MATH2405], RMIT University, Melbourne

Kabacoff R (2017) *Missing Data*, Quick-R, accessed 12 July 2023. https://www.statmethods.net/input/missingdata.html

Kwonhyun K (2018) *Long to Wide Data in R*, Datacamp, accessed 12 July 2023. https://www.datacamp.com/community/tutorials/long-wide-data-R

Smith G (2016) *Video Games Sales*, Kaggle, accessed 4 July 2023. https://www.kaggle.com/datasets/gregorut/videogamesales

Toggl (2023) *Difference Between CSV and XLS*, Toggl track, accessed 10 July 2023. https://toggl.com/track/difference-between-csv-xls/

Wickham H (2014) ‘Tidy Data’, *Journal of Statistical Software*, 59(10):1-23, doi:10.18637/jss.v059.i10.

Wickham H (2023) *conflicted: An Alternative Conflict Resolution Strategy*, R package version 1.2.0, accessed 10 July 2023. https://CRAN.R-project.org/package=conflicted

Wickham H, François R, Henry L, Müller K and Vaughan D (2023) *dplyr: A Grammar of Data Manipulation*, R package version 1.1.2, accessed 4 July 2023. https://CRAN.R-project.org/package=dplyr

Wickham H, Hester J and Bryan J (2023) *readr: Read Rectangular Text Data*, R package version 2.1.4, accessed 4 July 2023. https://CRAN.R-project.org/package=dplyr

Xie Y (2023) *knitr: A General-Purpose Package for Dynamic Report Generation in R*, R package version 1.43, accessed 4 July 2023. https://yihui.org/knitr/

Yihui Xie (2014) *The R Series: Implementing Reproducible Computational Research*, Chapman and Hall/CRC, doi:10.1201/9781315373461

Yihui Xie (2015) *The R Series: Dynamic Documents with R and knitr*, 2nd edition, Chapman and Hall/CRC, doi:10.1201/b15166
